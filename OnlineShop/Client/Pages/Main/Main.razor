@page "/Main";
@layout MainLayout;
@using OnlineShop.Shared
@using OnlineShop.Client.Pages.Auth
@using System.Net
@using System.Text
@using OnlineShop.Client.Services.State
@using OnlineShop.Server.DB.Mappers
@inject HttpClient client
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudCard>
    <MudText Typo="Typo.h6">Фильтрация</MudText>
    <MudGrid>
        @if (colorPalettes != null)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudSelect T="ColorPalette" @bind-Value="@goodsFilter.ColorPalette" Label="Цветовая палитра" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" ToStringFunc="@colorPaletteConverter">
                    @foreach (var item in colorPalettes)
                    {
                        <MudSelectItem Value="@item"/>
                    }
                </MudSelect>
            </MudItem>
        }
        @if (imageSizes != null)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudSelect T="ImageSize" @bind-Value="@goodsFilter.ImageSize" Label="Размер рамки" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" ToStringFunc="@imageSizeConverter">
                    @foreach (var item in imageSizes)
                    {
                        <MudSelectItem Value="@item"/>
                    }
                </MudSelect>
            </MudItem>
        }
    </MudGrid>
    <MudGrid>
        <MudItem xs="10" sm="1" md="3">
            <MudButton Variant="Variant.Filled" @onclick="GetGoods">Применить</MudButton>
        </MudItem>
        <MudItem xs="10" sm="1" md="3">
            <MudButton Variant="Variant.Outlined" @onclick="ResetFilter">Сбросить фильтр</MudButton>
        </MudItem>
    </MudGrid>
</MudCard>
<MudContainer>
    @* <MudButton Color="Color.Dark" @onclick="OpenLoginDialog">Normal Snackbar</MudButton> *@
    @if (goodsStats == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
    }
    else if (goodsStats != null)
    {
        @for (int i = 0; i < goodsStats.Length; i++)
        {
            <GoodItem ID=@goodsStats[i].ID Name=@goodsStats[i].Name Price=@goodsStats[i].Price OnBuyGood="BuyGoods"/>
        }
    }
</MudContainer>

@code {

    [CascadingParameter(Name = "AppState")]
    AppState AppState { get; set; }
    
    GoodsFilter goodsFilter;
    Func<ColorPalette, string> colorPaletteConverter = cp => cp?.Name;
    Func<ImageSize, string> imageSizeConverter = cp => cp?.Name;

    //private Dictionary<string, string> buttonStrings;
    private GoodsStats[] goodsStats;
    private ColorPalette[] colorPalettes;
    private ImageSize[] imageSizes;
    private string test;

    //Спавн, значения и прочее для модалки с логином
    private string username;
    private string password;


    public async Task ResetFilter()
    {
        goodsFilter = new GoodsFilter() {ColorPalette = null, ImageSize = null};
        await GetGoods();
    }

    public async Task GetGoods()
    {
        HttpResponseMessage responseMessage = await client.PutAsJsonAsync("api/Catalog", goodsFilter);
        if (responseMessage.StatusCode == HttpStatusCode.NotFound)
        {
            goodsStats = new GoodsStats[0];
        }
        else if (responseMessage.StatusCode == HttpStatusCode.OK)
        {
            goodsStats = await responseMessage.Content.ReadFromJsonAsync<GoodsStats[]>();
        }

    }

    public async Task BuyGoods(int goodsID)
    {
        var response = await client.PostAsJsonAsync("api/Catalog", goodsID);
        // ResponseStatus result = await response.Content.ReadFromJsonAsync<ResponseStatus>();

        switch (response.StatusCode)
        {
            case HttpStatusCode.OK:
                Snackbar.Clear();
                Snackbar.Add("Успешно куплено", Severity.Success);
                break;
            case HttpStatusCode.BadRequest:
                Snackbar.Clear();
                Snackbar.Add("Произошла ошибка при покупке", Severity.Error);
                break;
            case HttpStatusCode.Unauthorized:
                await OpenLoginDialog();
                break;
            default:
                break;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        goodsFilter = new GoodsFilter() {ColorPalette = null, ImageSize = null};
        GetGoods();
        colorPalettes = await AppState.ColorPalettesRepository.GetPalettes();
        imageSizes = await AppState.ImageSizesRepository.GetImageSizes();
    }

    private async Task OpenLoginDialog()
    {
        Dialog.Show<AuthDialog>();
    }

}