@page "/Main";
@layout MainLayout;
@using OnlineShop.Shared
@inject HttpClient client
@inject ISnackbar Snackbar

<MudContainer>

    <MudDialog @bind-IsVisible="visible" Options="dialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6">
                Авторизация
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField @bind-Value="username" Label="Имя пользователя" Variant="Variant.Outlined" Margin="Margin.Dense"/>
            <MudTextField @bind-Value="password" Label="Пароль" Variant="Variant.Outlined" Margin="Margin.Dense"/>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Authorize">Авторизоваться</MudButton>
        </DialogActions>
    </MudDialog>

    @* <MudButton Color="Color.Dark" @onclick="OpenLoginDialog">Normal Snackbar</MudButton> *@
    @if (goodsStats == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else if (goodsStats != null)
    {
        @for (int i = 0; i < goodsStats.Length; i++)
        {
            <GoodItem ID=@goodsStats[i].ID Name=@goodsStats[i].Name Price=@goodsStats[i].Price OnBuyGood="BuyGoods"/>
        }
    }
</MudContainer>

@code {
    //private Dictionary<string, string> buttonStrings;
    private GoodsStats[] goodsStats;
    private string test;

    //Спавн, значения и прочее для модалки с логином
    private bool visible = false;
    private string username;
    private string password;
    private DialogOptions dialogOptions = new() {FullWidth = false, CloseButton = true, DisableBackdropClick = true};

    public async Task BuyGoods(int goodsID)
    {
        var response = await client.PostAsJsonAsync<int>("api/Catalog", goodsID);
        ResponseStatus result = await response.Content.ReadFromJsonAsync<ResponseStatus>();

        switch (result)
        {
            case ResponseStatus.Completed:
                Snackbar.Add("Успешно куплено", Severity.Success);
                break;
            case ResponseStatus.Failed:
                Snackbar.Add("Произошла ошибка при покупке", Severity.Error);
                break;
            case ResponseStatus.NotAuthorized:
                await OpenLoginDialog();
                break;
            default:
                break;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            goodsStats = await client.GetFromJsonAsync<GoodsStats[]>("api/Catalog");
        }
        catch
        {
        }
    }

    private async Task OpenLoginDialog()
    {
        visible = true;
        Console.WriteLine(visible);
    // StateHasChanged();
    }

    private async Task Authorize()
    {
        if (username != "" && password != "")
        {
            UserCredentials userCredentials = new UserCredentials();
            userCredentials.UserName = username;
            userCredentials.Password = password;

            var response = await client.PutAsJsonAsync<UserCredentials>("api/Auth", userCredentials);
            User user = await response.Content.ReadFromJsonAsync<User>();

            if (user != null)
                visible = false;
        }
    }
    
}