@using Blazor.Cropper
@using System.Drawing;
@using System.IO
@using OnlineShop.Client.Services.State
@using OnlineShop.Server.DB.Mappers
@using OnlineShop.Shared
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats
@using SixLabors.ImageSharp.Formats.Bmp
@using SixLabors.ImageSharp.PixelFormats
@using Color = MudBlazor.Color
@inject IJSRuntime js;
@inject AppState _appState;
@inject HttpClient client
@inject ISnackbar _snackbar

<MudPaper Class="">
    <h3>Cropper</h3>
    <InputFile id="input1" OnChange="OnInputFileChange"></InputFile>

    @if (file != null)
    {
        <Blazor.Cropper.Cropper
            MaxCropedHeight="500"
            MaxCropedWidth="500"
            CropperHeight="600"
            AspectRatio="_selectedImageSize == null ? 1 : _selectedImageSize.Proportion"
            @ref="cropper"
            RequireAspectRatio="true"
            InputId="input1"
            ImageFile="file"
            @bind-Ratio="_cropRatio"
            PureCSharpProcessing="false"
            OnSizeChanged="t =>{ width = t.Item1; height = t.Item2; }">
        </Blazor.Cropper.Cropper>
        <footer class="modal-card-foot">
            @* <MudSlider @bind-Value="proportion" Min="1" Max="8" Color="Color.Info">Value: @proportion.ToString()</MudSlider> *@

            @if (cropper != null)
            {
                <div>
                    width: @width |
                    height: @height
                </div>
                <MudChipSet Filter="true" SelectedChipChanged="SelectProportion" Mandatory="true">
                    @if (_imageSizes != null)
                    {
                        @for (int i = 0; i < _imageSizes.Length; i++)
                        {
                            <MudChip
                                Text="@_imageSizes[i].Name"
                                Value="@_imageSizes[i]"
                                Default="FirstDefault(i)"
                                Variant="Variant.Outlined"
                                Color="Color.Dark">
                            </MudChip>
                        }
                    }
                </MudChipSet>
            }

        </footer>
    }
    @if (file != null || pixelizeHEXImage != null)
    {
        <MudChipSet Filter="true" SelectedChipChanged="SelectPalette" Mandatory="true">
            @if (_colorPalettes != null)
            {
                @for (int i = 0; i < _colorPalettes.Length; i++)
                {
                    <MudChip
                        Text="@_colorPalettes[i].Name"
                        Value="@_colorPalettes[i]"
                        Default="@FirstDefault(i)"
                        Variant="Variant.Outlined"
                        Color="Color.Info">
                    </MudChip>
                }
            }
        </MudChipSet>
    }

    @if (file != null)
    {
        <MudButton @onclick="DoneCrop" Color="Color.Secondary">Crop image</MudButton>
    }


    @if (!string.IsNullOrEmpty(imageDataUrl) && !parsing)
    {
    }

    @if (pixelizeHEXImage != null)
    {
        <MudGrid>
            <MudItem xs="6">
                <MudText>Original</MudText>
                <img src="@imageDataUrl" width="500" height="@FitImage()"/>
            </MudItem>
            <MudItem xs="6">
                <MudText>Pixilated</MudText>
                <Preview Pixels="pixelizeHEXImage" PixelSize="@CalcPixelSize()"/>
            </MudItem>

        </MudGrid>
        <MudButton @onclick="SaveImage" Color="Color.Primary">Save</MudButton>
    }
</MudPaper>

@code {
    Blazor.Cropper.Cropper cropper;
    private ElementReference _image;
    IBrowserFile file;
    double width;
    double height;
    bool parsing = false;
    double _cropRatio = 1;


    MudChip selectedSize;
    MudChip selectedPalette;
    private bool isPaletteChanged = false;

    // images
    string imageDataUrl = "";
    private Image<Rgba32> croppedImage;
    private int[][] pixelizeImage;
    private string[,] pixelizeHEXImage;

    private ColorPalette _selectedColorPalette = new ColorPalette {Color1 = "#1c1c1c", Color2 = "#404040", Color3 = "#616161", Color4 = "#8a8a8a", Color5 = "#b3b3b3", Color6 = "#d9d9d9", Color7 = "#f5f5f5"};
    ColorPalette[] _colorPalettes;
    private ImageSize _selectedImageSize;
    ImageSize[] _imageSizes;

    protected override async Task OnInitializedAsync()
    {
        _imageSizes = await _appState.ImageSizesRepository.GetImageSizes();
        _selectedImageSize = _imageSizes[0];
        _colorPalettes = await _appState.ColorPalettesRepository.GetPalettes();
        _selectedColorPalette = _colorPalettes[0];
    }

    bool FirstDefault(int number) => number == 0;

    async Task OnInputFileChange(InputFileChangeEventArgs args)
    {
        await js.InvokeVoidAsync("console.log", DateTime.Now.ToString());
        file = args.File;
    }

    void OnRatioChange(ChangeEventArgs args)
    {
        _cropRatio = int.Parse(args.Value.ToString()) / 100.0;
    }

    async Task DoneCrop()
    {
        var args = await cropper.GetCropedResult();
        file = null;
        parsing = true;
        base.StateHasChanged();
        await Task.Delay(10); // a hack, otherwise prompt won't show
        await js.InvokeVoidAsync("console.log", "converted!");
        var base64string = await args.GetBase64Async();
        byte[] bitmap = await new ImageCroppedResult(base64string).GetDataAsync();
        croppedImage = Image.Load(bitmap);
        imageDataUrl = $"data:image/png;base64,{base64string}";

        Pixelize(croppedImage);
        parsing = false;
        isPaletteChanged = false;
    }

    private struct Sums
    {
        /// <summary>
    /// Gets or sets the alpha component.
    /// </summary>
        public int A { get; set; }

        /// <summary>
    /// Gets or sets the red component.
    /// </summary>
        public int R { get; set; }

        /// <summary>
    /// Gets or sets the blue component.
    /// </summary>
        public int B { get; set; }

        /// <summary>
    /// Gets or sets the green component.
    /// </summary>
        public int G { get; set; }

        /// <summary>
    /// Gets or sets the total count.
    /// </summary>
        public int T { get; set; }
    }

    public void Pixelize(Image<Rgba32> image)
    {
    //50x50
        int blockSizeX = (int) MathF.Truncate(image.Width / _selectedImageSize.SizeX);
        int blockSizeY = (int) MathF.Truncate(image.Height / _selectedImageSize.SizeY);
        Rgba32[,] averageGrayscaledImage = new Rgba32[_selectedImageSize.SizeX, _selectedImageSize.SizeY];
        pixelizeHEXImage = new string[_selectedImageSize.SizeX, _selectedImageSize.SizeY];
        pixelizeImage = new int[_selectedImageSize.SizeX][];
        for (int i = 0; i < pixelizeImage.Length; i++)
        {
            pixelizeImage[i] = new int[_selectedImageSize.SizeY];
        }
        float minGrayscaled = 1.1f;
        float maxGrayscaled = -0.1f;

    //                  image.Width += blockSizeX
        for (int x = 0; x < _selectedImageSize.SizeX; x++)
        {
    //                  image.Height += blockSizeY
            for (int y = 0; y < _selectedImageSize.SizeY; y++)
            {
                var sums = new Sums();

                for (int xx = 0; xx < blockSizeX; ++xx)
                {
                    for (int yy = 0; yy < blockSizeY; ++yy)
                    {
                        if (x * blockSizeY + xx >= image.Width || y * blockSizeY + yy >= image.Height)
                        {
                            continue;
                        }

                        Rgba32 color = image[x * blockSizeY + xx, y * blockSizeY + yy];
                        sums.A += color.A;
                        sums.R += color.R;
                        sums.G += color.G;
                        sums.B += color.B;
                        sums.T++;
                    }
                }

    //Контрасность, суть алгоритма
    //Найти диапазон цветов, использующихся в пикселизованной картинке с argb glayscale цветами
    //От каждого цвета матрицы пикс. изображения отнять минимальное значение цвета
    //разделить получившейся цвет на определенную константу, которая распределяет цвета по палитрам

    //Rgba32 average = new Rgba32((float)sums.R / sums.T / 255, (float)sums.G / sums.T / 255, (float)sums.B / sums.T / 255, 1);
                float averageGrayscaled = (sums.R * 0.2126f + sums.G * 0.7152f + sums.B * 0.0722f) / sums.T / 255;

    /*
                //нормальное распределение цветов
                int paletteColorIndex = (int)(grayscaled / 0.16669);
                pixelizeImage[x, y] = grayscalePalette[paletteColorIndex];
                */

    /*
                //повышенная контранстность
                 */
                if (averageGrayscaled > maxGrayscaled)
                    maxGrayscaled = averageGrayscaled;
                else if (averageGrayscaled < minGrayscaled)
                    minGrayscaled = averageGrayscaled;

                averageGrayscaledImage[x, y] = new Rgba32(averageGrayscaled, averageGrayscaled, averageGrayscaled, 1);
            }
        }

        float grayscaledRange = maxGrayscaled - minGrayscaled;
        float divider = grayscaledRange / 6;
        int colorIndex;
        for (int x = 0; x < pixelizeHEXImage.GetLength(0); x++)
        {
            for (int y = 0; y < pixelizeHEXImage.GetLength(1); y++)
            {
                float t = (float) averageGrayscaledImage[x, y].R / 255;
                colorIndex = (int) ((t - minGrayscaled) / divider);
                pixelizeImage[x][y] = colorIndex;
    //if (colorIndex > 6) colorIndex = 6;
    //else if (colorIndex < 0) colorIndex = 0;
            }
        }

        Redraw();
    }

    public void Redraw()
    {
        for (int x = 0; x < pixelizeHEXImage.GetLength(0); x++)
        {
            for (int y = 0; y < pixelizeHEXImage.GetLength(1); y++)
            {
                switch (pixelizeImage[x][y])
                {
                    case 0:
                        pixelizeHEXImage[x, y] = _selectedColorPalette.Color1;
                        break;
                    case 1:
                        pixelizeHEXImage[x, y] = _selectedColorPalette.Color2;
                        break;
                    case 2:
                        pixelizeHEXImage[x, y] = _selectedColorPalette.Color3;
                        break;
                    case 3:
                        pixelizeHEXImage[x, y] = _selectedColorPalette.Color4;
                        break;
                    case 4:
                        pixelizeHEXImage[x, y] = _selectedColorPalette.Color5;
                        break;
                    case 5:
                        pixelizeHEXImage[x, y] = _selectedColorPalette.Color6;
                        break;
                    default:
                        pixelizeHEXImage[x, y] = _selectedColorPalette.Color7;
                        break;
                }
            }
        }
    }

    /*
     
    async void SetPalette()
    {
        var response = await client.PostAsJsonAsync<int>("api/Images", goodsID);
    // ResponseStatus result = await response.Content.ReadFromJsonAsync<ResponseStatus>();

        switch (response.StatusCode)
        {
            case HttpStatusCode.OK:
                Snackbar.Clear();
                Snackbar.Add("Успешно куплено", Severity.Success);
                break;
            case HttpStatusCode.BadRequest:
                Snackbar.Clear();
                Snackbar.Add("Произошла ошибка при покупке", Severity.Error);
                break;
            case HttpStatusCode.Unauthorized:
                await OpenLoginDialog();
                break;
            default:
                break;
        }
    }
    */

    async void GetCropResult()
    {
        var re = await cropper.GetCropedResult();
        await js.InvokeAsync<Task>("previewResult", _image, re.Img);
    }

    private void SelectProportion(MudChip chip)
    {
        selectedSize = chip;
        if (selectedSize != null)
            _selectedImageSize = (ImageSize) selectedSize.Value;
    }

    private void SelectPalette(MudChip chip)
    {
        selectedPalette = chip;
        if (selectedPalette != null)
        {
            _selectedColorPalette = (ColorPalette) selectedPalette.Value;
            if (pixelizeImage != null)
                Redraw();
        }
    }

    private async void SaveImage()
    {
        try
        {
            UserImage image = await _appState.ImageRepository.UploadImage(pixelizeImage, _selectedImageSize, _selectedColorPalette);
            if (image != null)
                _snackbar.Add("Saved successfully", Severity.Success);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _snackbar.Add("Error while uploading", Severity.Error);
            throw;
        }
    }

    private string FitImage()
    {
        float aspect = _selectedImageSize.SizeX / (float) _selectedImageSize.SizeY;
        return $"{500f / aspect}px";
    }

    private double CalcPixelSize()
    {
        const float baseSize = 16 * 32;

        return Math.Round(baseSize / _selectedImageSize.SizeX, 3);
    }

}