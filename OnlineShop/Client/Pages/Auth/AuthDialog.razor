@using OnlineShop.Shared
@inject HttpClient client
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudDialog Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Вход в систему
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTabs Elevation="0" Rounded="true" Centered="true" PanelClass="pa-6">
            <MudTabPanel Text="Авторизация" ToolTip="ToolTip One">
                <MudTextField @bind-Value="username" Label="Имя пользователя" Variant="Variant.Outlined" Margin="Margin.Dense" Error="@authResult"/>
                <MudTextField @bind-Value="password" Label="Пароль" Variant="Variant.Outlined" Margin="Margin.Dense" Error="@authResult"/>
                <MudText Color="Color.Error">@loginError</MudText>
                <br>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Authorize" FullWidth="true">Войти</MudButton>
            </MudTabPanel>
            <MudTabPanel Text="Регистрация" ToolTip="ToolTip Two">
                <MudTextField @bind-Value="username" Label="Имя пользователя" Variant="Variant.Outlined" Margin="Margin.Dense" Error="@registerResult"/>
                <MudTextField @bind-Value="password" Label="Пароль" Variant="Variant.Outlined" Margin="Margin.Dense" Error="@registerResult"/>
                <MudTextField @bind-Value="passwordRepeated" Label="Повторите пароль" Variant="Variant.Outlined" Margin="Margin.Dense" Error="@registerResult"/>
                <MudText Color="Color.Error">@registerError</MudText>
                <br>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Register" FullWidth="true">Зарегистрироваться</MudButton>
            </MudTabPanel>
        </MudTabs>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private DialogOptions dialogOptions = new() {FullWidth = true, CloseButton = true, DisableBackdropClick = true};
    private string username;
    private string password;
    private string passwordRepeated;
    private bool authResult = false;
    private bool registerResult = false;
    private string loginError = "";
    private string registerError = "";

    private async Task Authorize()
    {
        if (username == "" || password == "")
        {
            loginError = "Заполните пустые поля";
        }
        else
        {
            UserCredentials userCredentials = new UserCredentials();
            userCredentials.UserName = username;
            userCredentials.Password = password;

            var response = await client.PutAsJsonAsync<UserCredentials>("api/Auth", userCredentials);
            User user = await response.Content.ReadFromJsonAsync<User>();

            if (user.UserName != null)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Clear();
                Snackbar.Add("Авторизация прошла успешно", Severity.Info);
                authResult = false;
            }
            else
            {
                loginError = "Неправильное имя пользователя или пароль";
            }
        }

        authResult = true;
    }

    public async Task Register()
    {
        if (username == "" || password == "" || passwordRepeated == "")
        {
            registerError = "Заполните пустые поля";
        }
        else if (passwordRepeated != password)
        {
            registerError = "Пароли не совпадают";
        }
        else
        {
            UserCredentials userCredentials = new UserCredentials();
            userCredentials.UserName = username;
            userCredentials.Password = password;
            
            var response = await client.PostAsJsonAsync<UserCredentials>("api/Auth", userCredentials);
            User user = await response.Content.ReadFromJsonAsync<User>();
                
            if (user.UserName != null)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Clear();
                Snackbar.Add("Регистрация прошла успешно", Severity.Info);
                registerResult = false;
            }
            else
            {
                registerError = "Пользователь с таким именем пользователя уже существует";
            }
        }
        
        registerResult = true;
    }
}