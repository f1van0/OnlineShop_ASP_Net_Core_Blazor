@using OnlineShop.Client.Services.State
@using OnlineShop.Client.Pages.Auth
@using OnlineShop.Shared
@implements IDisposable
@inject IDialogService _dialog

<MudDrawer @bind-Open="Open" Variant="@DrawerVariant.Responsive">

    <MudDrawerHeader Style="height: calc(var(--mud-appbar-height) - var(--mud-appbar-height)/4);">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="onClicked"/>
        <MudLink Href="/main" Underline="Underline.None" Color="Color.Default" Typo="Typo.h5" Class="ml-3 my-auto">
            Online Shop
        </MudLink>
    </MudDrawerHeader>

    <MudDrawerContainer>
        <MudNavMenu>
            <MudNavLink Href="/main" Icon="@Icons.Filled.Home">
                Каталог товаров
            </MudNavLink>
            @if (IsAuthorized())
            {
                <MudNavLink Href="/profile" Icon="@Icons.Filled.Person">
                    Личный кабинет
                </MudNavLink>
                <MudNavLink Href="/editor" Icon="@Icons.Filled.Architecture">
                    Редактор изображений
                </MudNavLink>
            }
            else
            {
                <MudNavLink Icon="@Icons.Filled.Person" OnClick="DisplayLoginDialog">
                    Личный кабинет
                </MudNavLink>
                <MudNavLink Icon="@Icons.Filled.Architecture" OnClick="DisplayLoginDialog">
                    Редактор изображений
                </MudNavLink>
            }
            @if (AppState.UserState.Role == "Admin")
            {
                <MudNavLink Href="/admin" Icon="@Icons.Filled.Tab">
                    Админ-панель
                </MudNavLink>
            }
        </MudNavMenu>
    </MudDrawerContainer>
</MudDrawer>

@code {

    [CascadingParameter(Name = "AppState")]
    public AppState AppState { get; set; }

    [Parameter]
    public bool Open { get; set; } = false;

    [Parameter]
    public EventCallback ClickedClose { get; set; }

    protected override void OnInitialized() =>
        AppState.StateChanged += StateHasChanged;

    public void Dispose() =>
        AppState.StateChanged -= StateHasChanged;

    private void onClicked() =>
        ClickedClose.InvokeAsync();

    private bool IsAuthorized() => 
        !string.IsNullOrEmpty(AppState.UserState.UserName);

    private void DisplayLoginDialog() =>
        _dialog.Show<AuthDialog>();

}